---
################################################################################
# COMMON PARAMETERS
################################################################################
before_script:
  - unset http_proxy ; unset https_proxy
  - env | grep ^CI_

################################################################################
# STAGES
################################################################################
stages:
  - build_img
  - build_pkg
  - build_maintenance
  - sign
  - publish
  - test
  - upload
  - build_zen

################################################################################
# VARIABLES
################################################################################
variables:
  PFBUILD_CENTOS_7_IMG: inverseinc/pfbuild-centos-7
  PFBUILD_DEB_STRETCH_IMG: inverseinc/pfbuild-debian-stretch
  PFBUILD_DEFAULT_DEV_TAG: latest
  CIDIR: ci
  CILIBDIR: ci/lib
  PACKERDIR: $CIDIR/packer
  ZENDIR: $CIDIR/packer/zen
  VAGRANT_IMG_DIR: $CIDIR/packer/vagrant_img
  MAINTDIR: $CILIBDIR/maintenance
  TESTDIR: $CILIBDIR/test
  UPLOAD_DIR: $CILIBDIR/upload
  RPM_DIR: rpm
  DEB_DIR: debian
  PUBLIC_REPO_URL: http://packetfence.org/downloads/PacketFence
  SF_REPO_URL: https://sourceforge.net/projects/packetfence/files/PacketFence%20ZEN
  # env variables
  ANSIBLE_FORCE_COLOR: 1
  ANSIBLE_STDOUT_CALLBACK: yaml
  VAGRANT_FORCE_COLOR: "true"


################################################################################
# TEMPLATES
################################################################################

########################################
# TRIGGERS
########################################
# triggers for dev jobs (devel and other development branches)
.job_dev_triggers:
  # run jobs on "devel" branch (push, schedules and web)
  # run jobs on any branches/tags via "Run pipeline", except:
  # - vX.Y.Z tag
  # - maintenance/X.Y branches
  only:
    - /^devel$/
    - web
    - feature/on-the-fly-fingerbank-acls
  except:
    - /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/
    - /^maintenance/[[:digit:]]+\.[[:digit:]]+$/

# triggers for release jobs
.job_release_triggers:
  # run jobs on release tag (vX.Y.Z) (push and web)
  # no schedule on tag
  # exclude branches to avoid trigger when a branch is called vX.Y.X
  only:
    - /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/
  except:
    - branches

# common triggers for jobs use for release and dev
.job_dev_and_release_triggers:
  # run jobs on "devel" branch *or* vX.Y.Z tag (push, schedules and web)
  # run jobs on any branches/tags via "Run pipeline", except:
  # - maintenance/X.Y branches
  only:
    - /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/
    - /^devel$/
    - web
  except:
    - /^maintenance/[[:digit:]]+\.[[:digit:]]+$/

# triggers for maintenance jobs
.job_maintenance_triggers:
  # run jobs on maintenance branches (push, schedules and web)
  # allow on all maintenance branches with a .gitlab-ci.yml (starting from 8.0)
  only:
    - /^maintenance/[[:digit:]]+\.[[:digit:]]+$/


# triggers for nightly jobs (using schedule feature)
.job_nightly_triggers:
  # run only jobs scheduled in GitLab UI
  only:
    - schedules

.job_devel_only_triggers:
  # run only jobs on "devel" branch (push, schedules and web)
  only:
    - /^devel$/

.job_branches_only_triggers:
  # run jobs on any branches only via "Run pipeline", except:
  # - devel branch
  # - vX.Y.Z tag
  # - maintenance/X.Y branches
  only:
    - web
  except:
    - /^devel$/
    - /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/
    - /^maintenance/[[:digit:]]+\.[[:digit:]]+$/
########################################    
# JOBS
########################################
.build_docker_img_job:
  stage: build_img
  script:
    - make -e -C ${PACKERDIR} build_docker_img
  tags:
    - shell

.build_vagrant_img_job:
  stage: build_img
  script:
    - make -e -C ${VAGRANT_IMG_DIR} ${BOX_NAME}
  after_script:
    - make -e -C ${VAGRANT_IMG_DIR} clean
  tags:
    - shell

.build_job:
  stage: build_pkg
  artifacts:
    expire_in: 1 day
    paths:
      - result/*
  tags:
    - docker-inverse

.maintenance_build_job:
  stage: build_maintenance
  artifacts:
    expire_in: 1 day
    paths:
      - result/*
  tags:
    - docker

.maintenance_sign_job:
  stage: sign
  artifacts:
    expire_in: 1 day
    paths:
      - result/*
  dependencies:
    - build_maintenance_centos_7
    - build_maintenance_debian_stretch
  tags:
    - shell

.test_job:
  stage: test
  dependencies:
    - pages
  tags:
    - inverse.ca
    - shell

.maintenance_deploy_job:
  stage: upload
  dependencies:
    - sign_maintenance
  variables:
    DEPLOY_USER: reposync
    DEPLOY_HOST: web.inverse.ca
    MAINT_DEPLOY_DIR: ${CI_ENVIRONMENT_NAME}
  script:
    - ./${UPLOAD_DIR}/deploy-artifacts.sh maintenance
  tags:
    - shell
    
.deploy_deb_job:
  stage: upload
  dependencies:
    - sign_dev_and_release
  variables:
    DEPLOY_USER: root
    DEB_DEPLOY_DIR: ${CI_ENVIRONMENT_NAME}
    DEPLOY_UPDATE: "/builds/bin/ci-repo-deploy deb ${CI_ENVIRONMENT_NAME}"
  script:
    - ./${UPLOAD_DIR}/deploy-artifacts.sh deb
  # run job on runners tag with inverse AND shell
  tags:
    - inverse
    - shell

.deploy_rpm_job:
  stage: upload
  dependencies:
    - sign_dev_and_release
  variables:
    DEPLOY_USER: root
    RPM_DEPLOY_DIR: ${CI_ENVIRONMENT_NAME}
    DEPLOY_SRPMS: "no"
    DEPLOY_UPDATE: "/builds/bin/ci-repo-deploy rpm ${CI_ENVIRONMENT_NAME}"
  script:
    - ./${UPLOAD_DIR}/deploy-artifacts.sh rpm
  # run job on runners tag with inverse AND shell
  tags:
    - inverse
    - shell

.deploy_rpm_packetfence-release_job:
  stage: upload
  dependencies:
    - sign_dev_and_release
  variables:
    DEPLOY_USER: reposync
    DEPLOY_HOST: web.inverse.ca
  environment:
    name: ${PKG_DEST_NAME}
    url: ${PUBLIC_REPO_URL}/RHEL7
  script:
    - ./${UPLOAD_DIR}/deploy-artifacts.sh packetfence-release
  tags:
    - shell

.build_zen_job:
  stage: build_zen
  environment:
    name: sourceforge
    url: ${SF_REPO_URL}/${CI_COMMIT_REF_NAME}
  after_script:
    - make -e -C ${ZENDIR} clean
    - make -e -C ${ZENDIR} clean_cache
  tags:
    - shell

.rpm_script:
  script:
    # temp
    - echo "%git_commit $CI_COMMIT_SHA" >> ${RPM_DIR}/.rpmmacros
    - cp ${RPM_DIR}/.rpmmacros ${HOME}
    - ci-build-pkg ${RPM_DIR}

.deb_script:
  script:
    - ./${CIDIR}/debian/convert-to-native-package.sh
    - cp ${CIDIR}/debian/.devscripts ${HOME}
    # temp
    - make conf/git_commit_id
    - quilt push
    - ci-build-pkg ${DEB_DIR}
  variables:
    QUILT_PATCHES: ${DEB_DIR}/patches

.maintenance_build_script:
  script:
    - ./${MAINTDIR}/build_and_sign_maintenance_artifacts.sh build

.maintenance_sign_script:
  script:
    - ./${MAINTDIR}/build_and_sign_maintenance_artifacts.sh sign

.test_centos_7_vars:
  variables:
    PF_VM_NAME: pfcen7dev

.test_debian_9_vars:
  variables:
    PF_VM_NAME: pfdeb9dev

.test_script:
  variables:
    INT_TEST_VM_NAMES: ad switch01 node01
  script:
    - make -e -C ${TESTDIR} test
  after_script:
    - make -e -C ${TESTDIR} halt
    

################################################################################
# STAGES
################################################################################

########################################
# BUILD_IMG JOBS
########################################
# build_docker_img jobs
build_docker_img_dev:
  extends:
    - .build_docker_img_job
    - .job_devel_only_triggers
  variables:
    DOCKER_TAGS: latest,maintenance-99-9
  # job need to be explicitly started
  # will not block other stages/jobs
  # will not run when we click "Run pipeline"
  when: manual

build_docker_img_branches:
  extends:
    - .build_docker_img_job
    - .job_branches_only_triggers
  variables:
    DOCKER_TAGS: ${CI_COMMIT_REF_SLUG}
  when: manual

build_docker_img_maintenance:
  extends:
    - .build_docker_img_job
    - .job_maintenance_triggers
  variables:
    DOCKER_TAGS: ${CI_COMMIT_REF_SLUG}
  when: manual

# build a docker image at release
# used to build release packages and maintenance artifacts for maintenance
build_docker_img_release:
  extends:
    - .build_docker_img_job
    - .job_release_triggers
  variables:
    DOCKER_TAGS: ${CI_COMMIT_TAG}
    ANSIBLE_CENTOS_GROUP: stable_centos
    ANSIBLE_CENTOS7_GROUP: stable_centos7
    ANSIBLE_CENTOS8_GROUP: stable_centos8
    ANSIBLE_DEBIAN_GROUP: stable_debian
    ANSIBLE_RUBYGEMS_GROUP: stable_rubygems
    ACTIVE_BUILDS: 'pfbuild-centos-7,pfbuild-stretch'

# build_vagrant_img jobs
build_vagrant_img_dev_centos_7:
  extends:
    - .build_vagrant_img_job
    - .job_dev_triggers
  variables:
    BOX_DESC: ${CI_COMMIT_SHORT_SHA}
    BOX_NAME: pfcen7dev
  when: manual

build_vagrant_img_dev_debian_stretch:
  extends:
    - .build_vagrant_img_job
    - .job_dev_triggers
  variables:
    BOX_DESC: ${CI_COMMIT_SHORT_SHA}
    BOX_NAME: pfdeb9dev
  when: manual

########################################
#  BUILD_PKG JOBS
########################################
# build_pkg jobs for development
build_pkg_dev_centos_7:
  image: ${PFBUILD_CENTOS_7_IMG}:${PFBUILD_DEFAULT_DEV_TAG}
  extends:
    - .build_job
    - .job_dev_triggers
    - .rpm_script

build_pkg_dev_debian_stretch:
  image: ${PFBUILD_DEB_STRETCH_IMG}:${PFBUILD_DEFAULT_DEV_TAG}
  extends:
    - .build_job
    - .job_dev_triggers
    - .deb_script

# build_pkg jobs for release
# CI_COMMIT_TAG contains vX.Y.X
build_pkg_release_centos_7:
  image: ${PFBUILD_CENTOS_7_IMG}:${CI_COMMIT_TAG}
  extends:
    - .build_job
    - .job_release_triggers
    - .rpm_script

build_pkg_release_debian_stretch:
  image: ${PFBUILD_DEB_STRETCH_IMG}:${CI_COMMIT_TAG}
  extends:
    - .build_job
    - .job_release_triggers
    - .deb_script

########################################
# BUILD_MAINTENANCE JOBS
########################################
# CI_COMMIT_REF_SLUG contains maintenance-X-Y
build_maintenance_centos_7:
  image: ${PFBUILD_CENTOS_7_IMG}:${CI_COMMIT_REF_SLUG}
  extends:
    - .maintenance_build_job
    - .maintenance_build_script
    - .job_maintenance_triggers

build_maintenance_debian_stretch:
  image: ${PFBUILD_DEB_STRETCH_IMG}:${CI_COMMIT_REF_SLUG}
  extends:
    - .maintenance_build_job
    - .maintenance_build_script
    - .job_maintenance_triggers

########################################
# SIGN JOBS
########################################
sign_dev_and_release:
  # GPG_USER_ID see GitLab variable
  # only use when executor is docker
  image: buildpkg/debian:buster
  stage: sign
  script:
    - ci-sign-pkg
  dependencies:
    - build_pkg_dev_centos_7
    - build_pkg_dev_debian_stretch
    - build_pkg_release_centos_7
    - build_pkg_release_debian_stretch
  artifacts:
    expire_in: 1 day
    paths:
      - result/*
  # run job on runners tag with inverse.ca AND shell
  tags:
    - shell
  extends:
    - .job_dev_and_release_triggers

sign_maintenance:
  # GPG_USER_ID see GitLab variable
  extends:
    - .maintenance_sign_job
    - .maintenance_sign_script
    - .job_maintenance_triggers

########################################
# PUBLISH JOBS
########################################
pages:
  # only use when executor is docker
  image: buildpkg/debian:buster
  stage: publish
  variables:
    PAGES_DIR: public
    PAGES_HOST: gitlab.io
  environment:
    name: PPA
    url: http://${CI_PROJECT_NAMESPACE}.${PAGES_HOST}/${CI_PROJECT_NAME}
  script:
    - ci-pages-ppa
    - ci-pages-home
    - ci-pages-tree
  dependencies:
    - sign_dev_and_release
  artifacts:
    expire_in: 1 day
    paths:
      - public
  # run job on runners tag with inverse.ca AND shell
  tags:
    - shell
  extends:
    - .job_dev_and_release_triggers

########################################
# TEST JOBS
########################################
test_pkg_devel_centos_7:
  variables:
    PERL_UNIT_TESTS: 'yes'
    GOLANG_UNIT_TESTS: 'yes'
    INTEGRATION_TESTS: 'no'
    VAGRANT_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-centos-7-dev
  extends:
    - .test_job
    - .test_centos_7_vars
    - .test_script
    - .job_dev_triggers
  when: manual

test_pkg_release_centos_7:
  variables:
    PERL_UNIT_TESTS: 'no'
    GOLANG_UNIT_TESTS: 'no'
    INTEGRATION_TESTS: 'no'
    # provision VM and run configurator test
    RUN_TESTS: 'yes'
    VAGRANT_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-centos-7-${CI_COMMIT_TAG}
  extends:
    - .test_job
    - .test_centos_7_vars
    - .test_script
    - .job_release_triggers

test_pkg_nigthly_centos_7:
  variables:
    PERL_UNIT_TESTS: 'yes'
    GOLANG_UNIT_TESTS: 'yes'
    INTEGRATION_TESTS: 'yes'
    VAGRANT_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-centos-7-dev
  extends:
    - .test_job
    - .test_centos_7_vars
    - .test_script
    - .job_nightly_triggers

test_pkg_devel_debian_stretch:
  variables:
    PERL_UNIT_TESTS: 'no'
    GOLANG_UNIT_TESTS: 'yes'
    INTEGRATION_TESTS: 'no'
    VAGRANT_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-debian-stretch-dev
  extends:
    - .test_job
    - .test_debian_9_vars
    - .test_script
    - .job_dev_triggers
  when: manual

test_pkg_release_debian_stretch:
  variables:
    PERL_UNIT_TESTS: 'no'
    GOLANG_UNIT_TESTS: 'no'
    INTEGRATION_TESTS: 'no'
    # provision VM and run configurator test
    RUN_TESTS: 'yes'
    VAGRANT_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-debian-stretch-${CI_COMMIT_TAG}
  extends:
    - .test_job
    - .test_debian_9_vars
    - .test_script
    - .job_release_triggers

test_pkg_nightly_debian_stretch:
  variables:
    PERL_UNIT_TESTS: 'no'
    GOLANG_UNIT_TESTS: 'yes'
    INTEGRATION_TESTS: 'yes'
    VAGRANT_DOTFILE_PATH: /var/local/gitlab-runner/vagrant/vagrant-debian-stretch-dev
  extends:
    - .test_job
    - .test_debian_9_vars
    - .test_script
    - .job_nightly_triggers
    
########################################
# UPLOAD JOBS
########################################
deploy_rpm_devel:
  extends:
    - .deploy_rpm_job
    - .job_devel_only_triggers
  environment:
    name: devel/x86_64
    url: ${PUBLIC_REPO_URL}/RHEL7/${CI_ENVIRONMENT_NAME}

# we deploy packetfence-release RPM with
# a fixed name *outside* a RPM repo
# for first installation
deploy_rpm_packetfence-release_devel:
  extends:
    - .deploy_rpm_packetfence-release_job
    - .job_devel_only_triggers
  variables:
    PKG_DEST_NAME: packetfence-release-7.devel.noarch.rpm

deploy_rpm_branches:
  extends:
    - .deploy_rpm_job
    - .job_branches_only_triggers
  environment:
    name: branches/x86_64
    url: ${PUBLIC_REPO_URL}/RHEL7/${CI_ENVIRONMENT_NAME}

deploy_rpm_packetfence-release_branches:
  extends:
    - .deploy_rpm_packetfence-release_job
    - .job_branches_only_triggers
  variables:
    PKG_DEST_NAME: packetfence-release-7.branches.noarch.rpm

deploy_rpm_release:
  extends:
    - .deploy_rpm_job
    - .job_release_triggers
  environment:
    name: x86_64
    url: ${PUBLIC_REPO_URL}/RHEL7/${CI_ENVIRONMENT_NAME}

# we deploy packetfence-release RPM with
# a fixed name *outside* a RPM repo
# for first installation
deploy_rpm_packetfence-release_release:
  extends:
    - .deploy_rpm_packetfence-release_job
    - .job_release_triggers
  variables:
    PKG_DEST_NAME: packetfence-release-7.stable.noarch.rpm

deploy_deb_devel:
  extends:
    - .deploy_deb_job
    - .job_devel_only_triggers
  environment:
    name: debian-devel
    url: ${PUBLIC_REPO_URL}/${CI_ENVIRONMENT_NAME}

deploy_deb_branches:
  extends:
    - .deploy_deb_job
    - .job_branches_only_triggers
  environment:
    name: debian-branches
    url: ${PUBLIC_REPO_URL}/${CI_ENVIRONMENT_NAME}

deploy_deb_release:
  extends:
    - .deploy_deb_job
    - .job_release_triggers
  environment:
    name: debian-lastrelease
    url: ${PUBLIC_REPO_URL}/${CI_ENVIRONMENT_NAME}

# we deploy artifacts for all distributions in one shot
deploy_maintenance:
  extends:
    - .maintenance_deploy_job
    - .job_maintenance_triggers
  environment:
    name: maintenance
    url: ${PUBLIC_REPO_URL}/${CI_ENVIRONMENT_NAME}

########################################
# BUILD_ZEN JOBS
########################################
build_zen_devel:
  extends:
    - .build_zen_job
    - .job_devel_only_triggers
  script:
    - make -e -C ${ZENDIR} zen-devel
  when: manual

build_zen_devel_nightly:
  extends:
    - .build_zen_job
  script:
    - make -e -C ${ZENDIR} zen-devel
  # only run this job during a schedule pipeline, on devel branch with RUN_BUILD_ZEN set to yes
  # RUN_BUILD_ZEN is a variable defined in GitLab UI (on scheduled job)
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_REF_NAME == "devel" && $RUN_BUILD_ZEN == "yes"'

build_zen_release:
  extends:
    - .build_zen_job
    - .job_release_triggers
  script:
    - make -e -C ${ZENDIR} zen-release
  when: manual
